TASK 13 

CODE :

// File: cuda_prime_finder.cu

#include <iostream>
#include <cmath>
#include <cuda.h>
#include <chrono>

#define N 1000000  // Find primes up to 1 million


// CUDA Kernel Function

__global__ void findPrimesCUDA(bool* d_primes) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x + 2; // Start from 2
    if (idx > N) return;

    bool prime = true;
    for (int i = 2; i <= sqrtf((float)idx); ++i) {
        if (idx % i == 0) {
            prime = false;
            break;
        }
    }
    d_primes[idx] = prime;
}


// CPU Function

void findPrimesCPU(bool* primes) {
    for (int i = 2; i <= N; ++i) {
        primes[i] = true;
        for (int j = 2; j * j <= i; ++j) {
            if (i % j == 0) {
                primes[i] = false;
                break;
            }
        }
    }
}


// Count Primes

int countPrimes(bool* primes) {
    int count = 0;
    for (int i = 2; i <= N; ++i) {
        if (primes[i]) count++;
    }
    return count;
}


// Main Function

int main() {
    // Allocate CPU memory
    bool* primesCPU = new bool[N + 1];
    bool* primesGPU = new bool[N + 1];

    // -------- CPU version --------
    auto startCPU = std::chrono::high_resolution_clock::now();
    findPrimesCPU(primesCPU);
    auto endCPU = std::chrono::high_resolution_clock::now();
    double timeCPU = std::chrono::duration<double, std::milli>(endCPU - startCPU).count();
    int countCPU = countPrimes(primesCPU);
    std::cout << "[CPU] Found " << countCPU << " primes in " << timeCPU << " ms\n";

    // -------- GPU version --------
    bool* d_primes;
    cudaMalloc(&d_primes, (N + 1) * sizeof(bool));
    cudaMemset(d_primes, 0, (N + 1) * sizeof(bool));

    int blockSize = 256;
    int gridSize = (N - 1 + blockSize - 1) / blockSize;

    cudaDeviceSynchronize();
    auto startGPU = std::chrono::high_resolution_clock::now();
    findPrimesCUDA<<<gridSize, blockSize>>>(d_primes);
    cudaDeviceSynchronize();
    auto endGPU = std::chrono::high_resolution_clock::now();

    double timeGPU = std::chrono::duration<double, std::milli>(endGPU - startGPU).count();

    cudaMemcpy(primesGPU, d_primes, (N + 1) * sizeof(bool), cudaMemcpyDeviceToHost);
    int countGPU = countPrimes(primesGPU);

    std::cout << "[GPU] Found " << countGPU << " primes in " << timeGPU << " ms\n";

    std::cout << "Speedup: " << (timeCPU / timeGPU) << "x\n";

    // Clean up
    cudaFree(d_primes);
    delete[] primesCPU;
    delete[] primesGPU;

    return 0;
}


OUTPUT : 
